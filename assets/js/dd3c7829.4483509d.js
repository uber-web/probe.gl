"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[127],{4137:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=p(n),c=a,h=m["".concat(s,".").concat(c)]||m[c]||u[c]||i;return n?r.createElement(h,l(l({ref:t},d),{},{components:n})):r.createElement(h,l({ref:t},d))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[m]="string"==typeof e?e:a,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},6162:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=n(7462),a=(n(7294),n(4137));const i={},l="BrowserTestDriver",o={unversionedId:"modules/test-utils/browser-test-driver",id:"modules/test-utils/browser-test-driver",title:"BrowserTestDriver",description:"A higher level helper class that inherits the BrowserDriver. Primarily intended for automating browser tests from Node.js shell scripts.",source:"@site/../docs/modules/test-utils/browser-test-driver.md",sourceDirName:"modules/test-utils",slug:"/modules/test-utils/browser-test-driver",permalink:"/probe.gl/docs/modules/test-utils/browser-test-driver",draft:!1,editUrl:"https://github.com/uber-web/probe.gl/tree/master/website/../docs/modules/test-utils/browser-test-driver.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"BrowserDriver",permalink:"/probe.gl/docs/modules/test-utils/browser-driver"},next:{title:"makeSpy",permalink:"/probe.gl/docs/modules/test-utils/make-spy"}},s={},p=[{value:"Usage",id:"usage",level:2},{value:"Constructor",id:"constructor",level:2},{value:"Methods",id:"methods",level:2},{value:"run(config : Object)",id:"runconfig--object",level:3},{value:"Built-in Exposed Globals",id:"built-in-exposed-globals",level:2},{value:"browserTestDriver_fail()",id:"browsertestdriver_fail",level:3},{value:"browserTestDriver_finish(message : String)",id:"browsertestdriver_finishmessage--string",level:3},{value:"browserTestDriver_isHeadless",id:"browsertestdriver_isheadless",level:3},{value:"browserTestDriver_captureAndDiffScreen(options : Object)",id:"browsertestdriver_captureanddiffscreenoptions--object",level:3},{value:"browserTestDriver_emulateInput(event: Object)",id:"browsertestdriver_emulateinputevent-object",level:3},{value:"keypress",id:"keypress",level:4},{value:"click",id:"click",level:4},{value:"mousemove",id:"mousemove",level:4},{value:"drag",id:"drag",level:4}],d={toc:p},m="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"browsertestdriver"},"BrowserTestDriver"),(0,a.kt)("p",{class:"badges"},(0,a.kt)("img",{src:"https://img.shields.io/badge/Node.js-v8.0-blue.svg?style=flat-square",alt:"Node"}),(0,a.kt)("img",{src:"https://img.shields.io/badge/Chrome-v64+-blue.svg?style=flat-square",alt:"Node"})),(0,a.kt)("p",null,"A higher level helper class that inherits the ",(0,a.kt)("a",{parentName:"p",href:"/docs/modules/test-utils/browser-driver"},(0,a.kt)("inlineCode",{parentName:"a"},"BrowserDriver")),". Primarily intended for automating browser tests from Node.js shell scripts."),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"BrowserTestDriver")," starts a Chromium browser instance and a server and opens a page with a URL that loads a script from the server. The script that runs in the browser is expected to report test results back using predefined global functions."),(0,a.kt)("p",null,"To use this class, ",(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/puppeteer"},"puppeteer")," and ",(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/pixelmatch"},"pixelmatch")," must be installed as dev dependencies."),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"In your node.js start script:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// This is the script that runs in Node.js and starts the browser\nconst {BrowserTestDriver} = require('@probe.gl/test-utils');\nnew BrowserTestDriver().run({\n  server: {\n    command: 'webpack-dev-server',\n    arguments: ['--env.browser-test']\n  },\n  headless: true\n});\n")),(0,a.kt)("p",null,"In your script that is run on the browser:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// Polyfill so that the bundle can execute in browsers not controlled by puppeteer\nrequire('@probe.gl/test-utils/polyfill');\n// Run test cases\n...\n// App is done running, terminate the browser instance\nwindow.browserTestDriver_finish('All tests passed');\n")),(0,a.kt)("h2",{id:"constructor"},"Constructor"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const browserTestDriver = new BrowserTestDriver(opts);\n")),(0,a.kt)("p",null,"Parameters:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"opts")," (Object)",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"id")," (String) - an id for this ",(0,a.kt)("inlineCode",{parentName:"li"},"BrowserTestDriver")," instance. Default ",(0,a.kt)("inlineCode",{parentName:"li"},"browser-driver"),".")))),(0,a.kt)("h2",{id:"methods"},"Methods"),(0,a.kt)("h3",{id:"runconfig--object"},"run(config : Object)"),(0,a.kt)("p",null,"Runs the tests:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Starts a Chromium browser instance."),(0,a.kt)("li",{parentName:"ul"},"Starts a dev server, e.g. a webpack-dev-server that bundles a test script."),(0,a.kt)("li",{parentName:"ul"},"Opens a browser page to run the test script."),(0,a.kt)("li",{parentName:"ul"},"Extracts test reports from the browser back into node"),(0,a.kt)("li",{parentName:"ul"},"Closes browser, server and terminates the current node script."),(0,a.kt)("li",{parentName:"ul"},"Passes an exit status (e.g. pass/fail) back to the invoking shell.")),(0,a.kt)("p",null,"Parameters:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"title")," (String) - name of the test, e.g. ",(0,a.kt)("inlineCode",{parentName:"li"},"'Unit tests'"),". Default ",(0,a.kt)("inlineCode",{parentName:"li"},"'Browser Test'"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"headless")," (Boolean) - whether to run the test in headless mode. If ",(0,a.kt)("inlineCode",{parentName:"li"},"true"),", all console outputs from the test app will be piped to the shell. If ",(0,a.kt)("inlineCode",{parentName:"li"},"false"),", the browser window will remain open for debugging."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"server")," (Object|Function|",(0,a.kt)("inlineCode",{parentName:"li"},"false"),")",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"If an object is supplied: used as options to create a dev server. Passed to ",(0,a.kt)("a",{parentName:"li",href:"/docs/modules/test-utils/browser-driver"},"BroserDriver.startServer"),"."),(0,a.kt)("li",{parentName:"ul"},"If a function is supplied: will be called to create a dev server. Should return a ",(0,a.kt)("inlineCode",{parentName:"li"},"Promise")," that resolves to the service URL."),(0,a.kt)("li",{parentName:"ul"},"If ",(0,a.kt)("inlineCode",{parentName:"li"},"false"),": no dev server."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"browser")," (Object) - options to user for creating the Puppeteer instance. Passed to ",(0,a.kt)("a",{parentName:"li",href:"/docs/modules/test-utils/browser-driver"},"BroserDriver.startBrowser"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"exposeFunctions")," (Object) - keys are function names to be added to the page's ",(0,a.kt)("inlineCode",{parentName:"li"},"window")," object, and the values are callback functions to execute in Node.js. See ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/GoogleChrome/puppeteer/blob/v1.11.0/docs/api.md#pageexposefunctionname-puppeteerfunction"},"exposeFunction")," for details."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"url")," (String) - if supplied, will be used instead of the URL returned by the dev server."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"maxConsoleMessageLength")," (Number) - used in ",(0,a.kt)("inlineCode",{parentName:"li"},"headless: true")," mode to crop log messages that are piped to the console. Default ",(0,a.kt)("inlineCode",{parentName:"li"},"500"),".")),(0,a.kt)("h2",{id:"built-in-exposed-globals"},"Built-in Exposed Globals"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"BrowserTestDriver")," instance exposes a series of global functions to the browser application.\nThe following functions can be called from the browser application to communicate with the nodejs script:"),(0,a.kt)("h3",{id:"browsertestdriver_fail"},"browserTestDriver_fail()"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"window.browserTestDriver_fail();\n")),(0,a.kt)("p",null,"Notify the node script that some test has failed."),(0,a.kt)("h3",{id:"browsertestdriver_finishmessage--string"},"browserTestDriver_finish(message : String)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"window.browserTestDriver_finish('Congratulations! All tests passed.');\n")),(0,a.kt)("p",null,"Notify the node script that the app has finished executing and the browser should be closed."),(0,a.kt)("h3",{id:"browsertestdriver_isheadless"},"browserTestDriver_isHeadless"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"if (window.browserTestDriver_isHeadless) {\n  console.log('Test is running in headless mode');\n}\n")),(0,a.kt)("p",null,"Truthy if the current test environment is headless."),(0,a.kt)("h3",{id:"browsertestdriver_captureanddiffscreenoptions--object"},"browserTestDriver_captureAndDiffScreen(options : Object)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"window.browserTestDriver_captureAndDiffScreen({\n  goldenImage: './golden-images/map.png',\n  region: {x: 0, y: 0, width: 800, height: 600},\n  threshold: 0.99\n}).then(result => {\n  // do something\n});\n")),(0,a.kt)("p",null,'Request a pixel diff between the current page and a reference "golden image." This can be used to verify that the page is visually rendered as expected.'),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"goldenImage")," (String) - path to the golden image, relative to the directory where the shell command is executed"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"region")," (Object, optional) - a bounding box to take a screenshot of. In shape of ",(0,a.kt)("inlineCode",{parentName:"li"},"{x, y, width, height}")," relative to the page. If not specified, will take a screenshot of the whole page."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"threshold")," (Number, optional) - the matching score for the test to pass. Between ",(0,a.kt)("inlineCode",{parentName:"li"},"0")," (no pixels matched) to ",(0,a.kt)("inlineCode",{parentName:"li"},"1")," (all pixels matched). Default ",(0,a.kt)("inlineCode",{parentName:"li"},"0.99"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"tolerance")," (Number, optional) - the tolerance when comparing two pixels. Between ",(0,a.kt)("inlineCode",{parentName:"li"},"0")," (strict color match) to ",(0,a.kt)("inlineCode",{parentName:"li"},"1")," (anything will pass). Default ",(0,a.kt)("inlineCode",{parentName:"li"},"0.1"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"includeAA")," (Boolean, optional) - If ",(0,a.kt)("inlineCode",{parentName:"li"},"true"),", all pixels are compared. Otherwise detect and ignore anti-aliased pixels. Default ",(0,a.kt)("inlineCode",{parentName:"li"},"false"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"includeEmpty")," (Boolean, optional) - If ",(0,a.kt)("inlineCode",{parentName:"li"},"true"),", the matching score is calculated as a percentage of all pixels. If ",(0,a.kt)("inlineCode",{parentName:"li"},"false"),", empty pixels (alpha 0) will be excluded, potentially make the score lower. Default ",(0,a.kt)("inlineCode",{parentName:"li"},"true"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"createDiffImage")," (Boolean, optional) - if ",(0,a.kt)("inlineCode",{parentName:"li"},"true"),", will generate binary image data that highlight the mismatched pixels. Default ",(0,a.kt)("inlineCode",{parentName:"li"},"false"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"saveOnFail")," (Boolean, optional) - if ",(0,a.kt)("inlineCode",{parentName:"li"},"true"),", any screenshots that failed to meet the target matching rate will be saved to disk for further investigation. Default ",(0,a.kt)("inlineCode",{parentName:"li"},"false"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"saveAs")," (String, optional) - the filename to save the screenshot as. If the string contains ",(0,a.kt)("inlineCode",{parentName:"li"},"[name]"),", it will be replaced by the golden image path. Default ",(0,a.kt)("inlineCode",{parentName:"li"},"[name]-failed.png"),".")),(0,a.kt)("p",null,"Returns: a ",(0,a.kt)("inlineCode",{parentName:"p"},"Promise")," that resolves to an object with the following fields:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"success")," (Boolean) - whether the test passed. A test can fail either because the matching score is lower than the specified ",(0,a.kt)("inlineCode",{parentName:"li"},"threshold"),", or an unexpected error occurred."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"headless")," (Boolean) - whether the browser was running in headless mode."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"match")," (Number) - the matching score. Between ",(0,a.kt)("inlineCode",{parentName:"li"},"0")," (no pixels matched) to ",(0,a.kt)("inlineCode",{parentName:"li"},"1")," (all pixels matched)."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"matchPercentage")," (String) - ",(0,a.kt)("inlineCode",{parentName:"li"},"match")," formatted in percentage form."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"diffImage")," (Uint8Array) - image data that highlight the mismatched pixels. Only if ",(0,a.kt)("inlineCode",{parentName:"li"},"createDiffImage: true"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"error")," (String) - error message if any.")),(0,a.kt)("h3",{id:"browsertestdriver_emulateinputevent-object"},"browserTestDriver_emulateInput(event: Object)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"window.browserTestDriver_emulateInput({\n  type: 'keypress',\n  key: 's',\n  ctrlKey: true\n}).then(result => {\n  // ctrl + S is pressed! do something\n});\n")),(0,a.kt)("p",null,"Dispatch an emulated user input to the page. The following event types are supported:"),(0,a.kt)("h4",{id:"keypress"},"keypress"),(0,a.kt)("p",null,"Press a key on the keyboard."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"type: 'keypress'")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"key")," (String) - see ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/GoogleChrome/puppeteer/blob/master/lib/USKeyboardLayout.js"},"https://github.com/GoogleChrome/puppeteer/blob/master/lib/USKeyboardLayout.js")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"delay")," (Number) - the time between keydown and keyup. Default ",(0,a.kt)("inlineCode",{parentName:"li"},"0"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"shiftKey")," (Boolean) - whether to press the key with the shift key down. Default ",(0,a.kt)("inlineCode",{parentName:"li"},"false"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ctrlKey")," (Boolean) - whether to press the key with the control key down. Default ",(0,a.kt)("inlineCode",{parentName:"li"},"false"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"metaKey")," (Boolean) - whether to press the key with the meta key down. Default ",(0,a.kt)("inlineCode",{parentName:"li"},"false"),".")),(0,a.kt)("h4",{id:"click"},"click"),(0,a.kt)("p",null,"Click the mouse at a given screen coordinate."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"type: 'click'")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"x")," (Number) - the screen x of the click."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"y")," (Number) - the screen y of the click."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"button")," (String) - ",(0,a.kt)("inlineCode",{parentName:"li"},"'left'"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"'right'")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"'middle'"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"delay")," (Number) - the time between mousedown and mouseup. Default ",(0,a.kt)("inlineCode",{parentName:"li"},"0"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"shiftKey")," (Boolean) - whether to click with the shift key down. Default ",(0,a.kt)("inlineCode",{parentName:"li"},"false"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ctrlKey")," (Boolean) - whether to click with the control key down. Default ",(0,a.kt)("inlineCode",{parentName:"li"},"false"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"metaKey")," (Boolean) - whether to click with the meta key down. Default ",(0,a.kt)("inlineCode",{parentName:"li"},"false"),".")),(0,a.kt)("h4",{id:"mousemove"},"mousemove"),(0,a.kt)("p",null,"Move the mouse to a given screen coordinate."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"type: 'mousemove'")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"x")," (Number) - the screen x to move the pointer to."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"y")," (Number) - the screen y to move the pointer to."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"steps")," (Number) - how many intermediate mousemove events to generate, default ",(0,a.kt)("inlineCode",{parentName:"li"},"1"),".")),(0,a.kt)("h4",{id:"drag"},"drag"),(0,a.kt)("p",null,"Drag the mouse from a given screen coordinate to another."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"type: 'drag'")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"startX")," (Number) - the screen x to drag from."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"startY")," (Number) - the screen y to drag from."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"endX")," (Number) - the screen x to drag to."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"endY")," (Number) - the screen y to drag to."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"button")," (String) - ",(0,a.kt)("inlineCode",{parentName:"li"},"'left'"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"'right'")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"'middle'"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"steps")," (Number) - how many intermediate mousemove events to generate, default ",(0,a.kt)("inlineCode",{parentName:"li"},"1"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"shiftKey")," (Boolean) - whether to drag with the shift key down. Default ",(0,a.kt)("inlineCode",{parentName:"li"},"false"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ctrlKey")," (Boolean) - whether to drag with the control key down. Default ",(0,a.kt)("inlineCode",{parentName:"li"},"false"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"metaKey")," (Boolean) - whether to drag with the meta key down. Default ",(0,a.kt)("inlineCode",{parentName:"li"},"false"),".")))}u.isMDXComponent=!0}}]);