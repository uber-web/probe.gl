"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[923],{4137:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},g="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),g=c(n),d=r,f=g["".concat(s,".").concat(d)]||g[d]||u[d]||i;return n?o.createElement(f,l(l({ref:t},p),{},{components:n})):o.createElement(f,l({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=d;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a[g]="string"==typeof e?e:r,l[1]=a;for(var c=2;c<i;c++)l[c]=n[c];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6896:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var o=n(7462),r=(n(7294),n(4137));const i={},l="Problems with Console Logging",a={unversionedId:"articles/issues-with-logging",id:"articles/issues-with-logging",title:"Problems with Console Logging",description:"Whether to use a library like probe.gl to improve on the browser's built-in console logging tends to be a personal preference, and people tend to have strong opinions on the matter. The question is obvious: the browser already provides a logging facility, why spend effort and code bloat wrapping it?",source:"@site/../docs/articles/issues-with-logging.md",sourceDirName:"articles",slug:"/articles/issues-with-logging",permalink:"/probe.gl/docs/articles/issues-with-logging",draft:!1,editUrl:"https://github.com/uber-web/probe.gl/tree/master/website/../docs/articles/issues-with-logging.md",tags:[],version:"current",frontMatter:{}},s={},c=[],p={toc:c},g="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(g,(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"problems-with-console-logging"},"Problems with Console Logging"),(0,r.kt)("p",null,"Whether to use a library like probe.gl to improve on the browser's built-in console logging tends to be a personal preference, and people tend to have strong opinions on the matter. The question is obvious: the browser already provides a logging facility, why spend effort and code bloat wrapping it?"),(0,r.kt)("p",null,'To illustrate some of the problems probe.gl is attempting to solve, let\'s consider how one would write a simple logging wrapper for an app that had started logging using the "raw" console API.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"function app() {\n  console.debug('hello world')\n}\n")),(0,r.kt)("p",null,"Let's say we want a function that logs conditionally (only if a ",(0,r.kt)("inlineCode",{parentName:"p"},"priority")," has been set), and only issues a warning once to avoid flooding the console. A first attempt could look like this"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"function log(priority, message) {\n  if (priority <= logPriority)\n    if (!cache[message]) {\n      console.debug(message);\n    }\n  }\n}\n...\napp() {\n  log(1, 'hello world');\n}\n")),(0,r.kt)("p",null,"Some issues with this:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Now the log message in Chrome console no longer let's you click back to the application. Instead it links back to the log function.")),(0,r.kt)("p",null,"In addition:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"console.debug is not available in Node.js and certain browsers.")))}u.isMDXComponent=!0}}]);