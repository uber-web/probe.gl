"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[505],{4137:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),d=i,m=c["".concat(s,".").concat(d)]||c[d]||g[d]||a;return n?r.createElement(m,o(o({ref:t},u),{},{components:n})):r.createElement(m,o({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:i,o[1]=l;for(var p=2;p<a;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6095:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>g,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var r=n(7462),i=(n(7294),n(4137));const a={},o="Console Logging",l={unversionedId:"articles/about-logging",id:"articles/about-logging",title:"Console Logging",description:"Probe API Signature",source:"@site/../docs/articles/about-logging.md",sourceDirName:"articles",slug:"/articles/about-logging",permalink:"/probe.gl/docs/articles/about-logging",draft:!1,editUrl:"https://github.com/uber-web/probe.gl/tree/master/website/../docs/articles/about-logging.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Usage",permalink:"/probe.gl/docs/get-started/adding-probes"},next:{title:"About Benchmarking",permalink:"/probe.gl/docs/articles/about-benchmarking"}},s={},p=[{value:"Probe API Signature",id:"probe-api-signature",level:3},{value:"Why Double Function Calls?",id:"why-double-function-calls",level:3},{value:"Log Priority",id:"log-priority",level:3},{value:"Log Options",id:"log-options",level:3},{value:"Log Message",id:"log-message",level:3},{value:"Log Parameters",id:"log-parameters",level:3},{value:"Probe Timings",id:"probe-timings",level:2},{value:"Types of Probes",id:"types-of-probes",level:2},{value:"Groups",id:"groups",level:3},{value:"Tables",id:"tables",level:3},{value:"Images",id:"images",level:3}],u={toc:p},c="wrapper";function g(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"console-logging"},"Console Logging"),(0,i.kt)("h3",{id:"probe-api-signature"},"Probe API Signature"),(0,i.kt)("p",null,"A probe.gl function invocation typically looks like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"log.probe(priority, message, ...args)();\n")),(0,i.kt)("p",null,"There are a lot of conventions and built-in capabilities. The following sections contains observations about this signature and provide more background about what is going on."),(0,i.kt)("h3",{id:"why-double-function-calls"},"Why Double Function Calls?"),(0,i.kt)("p",null,"A distinctive aspect of the probe API is the requirement for double function calls, i.e. the extra parenthesis at the end of ",(0,i.kt)("inlineCode",{parentName:"p"},"log.probe``(...)()"),'. The double function calls ensure that the Chrome browser console\'s clickable links are generated correctly. Thanks to these double parentheses you can click on a probe in the Chrome console and "go" directly to the probe call in your application source code.'),(0,i.kt)("p",null,"The double parenthesis is a rather unusual JavaScript programming idiom and if you forget it nothing will be logged. Therefore probe.gl will keep track of whether a returned log function was called and warn you next time you call probe if it wasn't."),(0,i.kt)("h3",{id:"log-priority"},"Log Priority"),(0,i.kt)("p",null,"A basic feature of probe.gl is that you can assign a ",(0,i.kt)("inlineCode",{parentName:"p"},"priority")," threshold to each probe. The term ",(0,i.kt)("inlineCode",{parentName:"p"},"priority"),' can seem a little counter-intuitive at first, as specifying a higher value in your probes actually make them less likely to "fire". The basic idea is that a probe will only "fire" if the log priority is greater than or equal to the probe\'s priority.'),(0,i.kt)("p",null,"Because of this most probe.gl APIs take a ",(0,i.kt)("inlineCode",{parentName:"p"},"priority")," parameter as a first argument."),(0,i.kt)("p",null,"| ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," | Unconditional. Always fires. errors and warnings are priority ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," by default. |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"1")," | Fires . |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"2")," | Always fires. |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"3")," | Always fires. |\n| ",(0,i.kt)("inlineCode",{parentName:"p"},"4")," | Always fires. |"),(0,i.kt)("p",null,"Note that regardless of log level, probes will only fire assuming probe itself is enabled."),(0,i.kt)("h3",{id:"log-options"},"Log Options"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"priority")," parameter is an overloaded parameter that can be supplied in the following ways:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"priority")," can be ommitted entirely. In this case, ",(0,i.kt)("inlineCode",{parentName:"p"},"priority")," defaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),", which means that the probe is executed / printed regardless of log level.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"priority")," can be a ",(0,i.kt)("inlineCode",{parentName:"p"},"Number"),", in which case it is used as the ",(0,i.kt)("inlineCode",{parentName:"p"},"priority"),' threshold of this probe, which will only "fire" if the log priority is greater than or equal to this value.')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"priority")," can be an ",(0,i.kt)("inlineCode",{parentName:"p"},"Object"),", in which case it is used as the ",(0,i.kt)("inlineCode",{parentName:"p"},"priority"),' threshold of this probe. It will only "fire" if the log priority is greater than or equal to this value.')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"priority")," (",(0,i.kt)("inlineCode",{parentName:"p"},"Number"),") - as above, if not supplied defaults to ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," (fires unconditonally if probe is enabled).")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"once")," (",(0,i.kt)("inlineCode",{parentName:"p"},"Boolean"),"|",(0,i.kt)("inlineCode",{parentName:"p"},"Number"),") - if ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", the argument string will be cached and this log will only be fired once. If a number, this is the minimum amount of seconds between logging the same message."))),(0,i.kt)("h3",{id:"log-message"},"Log Message"),(0,i.kt)("p",null,"Many probe.gl API calls take a ",(0,i.kt)("inlineCode",{parentName:"p"},"message")," parameter. This ",(0,i.kt)("inlineCode",{parentName:"p"},"message")," is an overloaded parameter that can be either a string or a function that returns a string, which will be called every time the probe fires."),(0,i.kt)("p",null,"The main purpose of supporting functions is to avoid situations where a message string is being generated even when the probe doesn't fire:"),(0,i.kt)("p",null,"A typical inconvenience when logging is unwanted performance impact when generating dynamic log messages. In the case below, the string template literal is being generated every time the line executes, ",(0,i.kt)("em",{parentName:"p"},"even when logging is disabled"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"log.probe(1, `${object} has ${value}`)();\n")),(0,i.kt)("p",null,"With probe, the solution is easy:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"log.probe(1, () => `${object} has ${value}`)();\n")),(0,i.kt)("p",null,"Now the performance overhead of the probe is again minimized."),(0,i.kt)("h3",{id:"log-parameters"},"Log Parameters"),(0,i.kt)("p",null,"Most probe method accept a variable number of additional arguments at the end of the function call. These arguments will be passed directly to the underlying console method. This allows you to leverage the built-in Chrome console printing mechanisms for e.g. Objects and Arrays (these allow you to expand and descend into objects)."),(0,i.kt)("h2",{id:"probe-timings"},"Probe Timings"),(0,i.kt)("h2",{id:"types-of-probes"},"Types of Probes"),(0,i.kt)("h3",{id:"groups"},"Groups"),(0,i.kt)("p",null,"Chrome provides a wonderful grouping feature that allows us to organize logs in expandable headers."),(0,i.kt)("h3",{id:"tables"},"Tables"),(0,i.kt)("p",null,"Chrome provides a table logging method"),(0,i.kt)("h3",{id:"images"},"Images"),(0,i.kt)("p",null,"Under Chrome it is possible to log images to the console, using a rather involved styling trick. ",(0,i.kt)("inlineCode",{parentName:"p"},"log.image")," will be a no-op under all other environments."))}g.isMDXComponent=!0}}]);