"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[745],{4137:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>k});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=p(n),c=i,k=m["".concat(s,".").concat(c)]||m[c]||u[c]||r;return n?a.createElement(k,l(l({ref:t},d),{},{components:n})):a.createElement(k,l({ref:t},d))}));function k(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[m]="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},6865:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var a=n(7462),i=(n(7294),n(4137));const r={},l="StatsWidget",o={unversionedId:"modules/stats-widget/stats-widget",id:"modules/stats-widget/stats-widget",title:"StatsWidget",description:"A widget that displays the state of a probe.gl Stats object to screen.",source:"@site/../docs/modules/stats-widget/stats-widget.md",sourceDirName:"modules/stats-widget",slug:"/modules/stats-widget/",permalink:"/probe.gl/docs/modules/stats-widget/",draft:!1,editUrl:"https://github.com/uber-web/probe.gl/tree/master/website/../docs/modules/stats-widget/stats-widget.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Stats",permalink:"/probe.gl/docs/modules/stats/"},next:{title:"Bench",permalink:"/probe.gl/docs/modules/bench/"}},s={},p=[{value:"Usage",id:"usage",level:2},{value:"Methods",id:"methods",level:2},{value:"constructor",id:"constructor",level:3},{value:"setStats",id:"setstats",level:3},{value:"setFormatter",id:"setformatter",level:3},{value:"update",id:"update",level:3}],d={toc:p},m="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(m,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"statswidget"},"StatsWidget"),(0,i.kt)("p",null,"A widget that displays the state of a probe.gl ",(0,i.kt)("inlineCode",{parentName:"p"},"Stats")," object to screen."),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("p",null,"Create a ",(0,i.kt)("inlineCode",{parentName:"p"},"StatsWidget")," HTML element to display tracked ",(0,i.kt)("inlineCode",{parentName:"p"},"Stats"),". Each ",(0,i.kt)("inlineCode",{parentName:"p"},"Stat")," can\nbe associated with a ",(0,i.kt)("inlineCode",{parentName:"p"},"formatter")," that indicates how it should be displayed."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import React, {Component} from 'react';\nimport {Stats} from '@probe.gl/stats';\nimport StatsWidget from '@probe.gl/stats-widget';\n\nclass App extends Component {\n  componentDidMount() {\n    this._stats = new Stats({\n      id: 'My Stats'\n    });\n\n    this._statsWidget = new StatsWidget(this._stats, {\n      container: this._containerRef\n    });\n\n    this.setState({intervalId: setInterval(this._update, 300)});\n  }\n\n  componentWillUnmount() {\n    // use intervalId from the state to clear the interval\n    clearInterval(this.state.intervalId);\n  }\n\n  _update() {\n    // create a stat with name and type\n    const counter = this._stats.get('Counter', 'count');\n    counter.incrementCount();\n    this._statsWidget.update();\n  }\n\n  render() {\n    return (<div ref={_ => this._containerRef = _}/>);\n  }\n}\n\n")),(0,i.kt)("h2",{id:"methods"},"Methods"),(0,i.kt)("h3",{id:"constructor"},"constructor"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"new StatsWidget(stats, options)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"stats")," (",(0,i.kt)("inlineCode",{parentName:"li"},"Stats"),") - a probe.gl ",(0,i.kt)("inlineCode",{parentName:"li"},"Stats")," instance."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"options"),": (",(0,i.kt)("inlineCode",{parentName:"li"},"Object"),")",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"title")," (",(0,i.kt)("inlineCode",{parentName:"li"},"String"),") - header text for the widget. Defaults to the ",(0,i.kt)("inlineCode",{parentName:"li"},"id")," of the ",(0,i.kt)("inlineCode",{parentName:"li"},"Stats")," object."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"framesPerUpdate")," (",(0,i.kt)("inlineCode",{parentName:"li"},"Number"),") - number of times ",(0,i.kt)("inlineCode",{parentName:"li"},"update")," must be called before the widget is re-rendered. Allows the application\nto call ",(0,i.kt)("inlineCode",{parentName:"li"},"update")," each frame with re-renders occurring at a slower rate."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"container")," (DOMElement) - DOM element to use as container for the widget. Will be created internally if not provided."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"css")," (",(0,i.kt)("inlineCode",{parentName:"li"},"Object"),") - css properties to apply to the container ",(0,i.kt)("inlineCode",{parentName:"li"},"div")," of the widget. Two special keys can be used to modify the\nstyle of nested elements:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"header")," (",(0,i.kt)("inlineCode",{parentName:"li"},"Object"),") - css properties to apply to the header ",(0,i.kt)("inlineCode",{parentName:"li"},"div")," of the widget."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"item")," (",(0,i.kt)("inlineCode",{parentName:"li"},"Object"),") - css properties to apply to the individual item ",(0,i.kt)("inlineCode",{parentName:"li"},"div"),"s for each stat displayed in the widget."))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"formatters")," (",(0,i.kt)("inlineCode",{parentName:"li"},"Object"),") - text formatters to use to display a stat. Keys are the stat's ",(0,i.kt)("inlineCode",{parentName:"li"},"name"),". Value can either be\na function that takes a single ",(0,i.kt)("inlineCode",{parentName:"li"},"stat")," object as argument, or one of the following strings:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"count"),": Display as a simple count."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"averageTime"),": Display average time."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"totalTime"),": Display total time."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"fps"),": Display Hz as a frame rate."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"memory"),": Display count as a memory measurement.\n",(0,i.kt)("inlineCode",{parentName:"li"},"resetOnUpdate")," (",(0,i.kt)("inlineCode",{parentName:"li"},"Object"),") - whether the a stat should be reset each time the widget is re-rendered. Keyed by the stat's ",(0,i.kt)("inlineCode",{parentName:"li"},"name"),".")))))),(0,i.kt)("h3",{id:"setstats"},"setStats"),(0,i.kt)("p",null,"Set Stats object rendered by the widget."),(0,i.kt)("p",null,"Parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"stats")," () - ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/uber-web/probe.gl/blob/master/docs/api-reference/log/stats.md"},(0,i.kt)("inlineCode",{parentName:"a"},"Stats"))," Object.")),(0,i.kt)("h3",{id:"setformatter"},"setFormatter"),(0,i.kt)("p",null,"Set the formatter associated with a given stat."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"statsWidget.setFormatter(name, formatter)")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"name")," (",(0,i.kt)("inlineCode",{parentName:"li"},"String"),", required) - the name of the stat to associate with a formatter."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"formatter")," (",(0,i.kt)("inlineCode",{parentName:"li"},"Function"),", required) - function that takes a ",(0,i.kt)("inlineCode",{parentName:"li"},"Stat")," object and returns a string.")),(0,i.kt)("h3",{id:"update"},"update"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"statsWidget.update()")),(0,i.kt)("p",null,"Rerender the widget."))}u.isMDXComponent=!0}}]);