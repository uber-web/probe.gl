"use strict";(self.webpackChunkproject_website=self.webpackChunkproject_website||[]).push([[659],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(n),m=i,h=p["".concat(s,".").concat(m)]||p[m]||d[m]||a;return n?r.createElement(h,o(o({ref:t},c),{},{components:n})):r.createElement(h,o({ref:t},c))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:i,o[1]=l;for(var u=2;u<a;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},439:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var r=n(7462),i=(n(7294),n(3905));const a={},o="Bench",l={unversionedId:"modules/bench/bench",id:"modules/bench/bench",title:"Bench",description:"Bench is a benchmark harness that allows you to organize a number of",source:"@site/../docs/modules/bench/bench.md",sourceDirName:"modules/bench",slug:"/modules/bench/",permalink:"/probe.gl/docs/modules/bench/",draft:!1,editUrl:"https://github.com/uber-web/probe.gl/tree/master/website/../docs/modules/bench/bench.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"StatsWidget",permalink:"/probe.gl/docs/modules/stats-widget/"},next:{title:"BrowserDriver",permalink:"/probe.gl/docs/modules/test-utils/browser-driver"}},s={},u=[{value:"Usage",id:"usage",level:2},{value:"Methods",id:"methods",level:2},{value:"constructor",id:"constructor",level:3},{value:"group(id)",id:"groupid",level:3},{value:"add",id:"add",level:3},{value:"addAsync",id:"addasync",level:2},{value:"run()",id:"run",level:3},{value:"calibrate",id:"calibrate",level:3}],c={toc:u},p="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"bench"},"Bench"),(0,i.kt)("p",null,"Bench is a benchmark harness that allows you to organize a number of\nbenchmarks / performance tests into a Benchmark suite that can be executed\nwith a single command. "),(0,i.kt)("p",null,"Each test must be registered with a unique ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," which allows ",(0,i.kt)("inlineCode",{parentName:"p"},"Bench")," to do compare results across runs and perform limited regression testing."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Precise, repeatable performance measuring on a modern multi-tasking OS is hard, as subsequent runs might be scheduled different by the OS. The consistency between repeated benchmark tests tend to be within +- 10-15% and is generally sufficient for verifying incremental improvements.")),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import {Bench} from '@probe.gl/bench';\n\nconst bench = new Bench()\n  .group('Utility tests')\n  .add('Math.sqrt', () => Math.sqrt(100))\n  ;\n\nbench.run();\n")),(0,i.kt)("h2",{id:"methods"},"Methods"),(0,i.kt)("h3",{id:"constructor"},"constructor"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"new Bench({})")),(0,i.kt)("h3",{id:"groupid"},"group(id)"),(0,i.kt)("p",null,"Adds a group header."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"bench.group(id)")),(0,i.kt)("h3",{id:"add"},"add"),(0,i.kt)("p",null,"Adds a test case. Supports multiple signatures:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"bench.add(id: string, testCaseProps: TestCaseProps, testFunc: () => unknown)"),"\n",(0,i.kt)("inlineCode",{parentName:"p"},"bench.add(id: string, testFunc: () => unknown)")),(0,i.kt)("p",null,"Parameters"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"id")," (String) - The unique string for this test. Used as the description of the test in the results."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"testFunc")," (Function, options) - Function run for each test iteration.")),(0,i.kt)("p",null,"Options"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"priority"),"=",(0,i.kt)("inlineCode",{parentName:"li"},"0")," (Number, optional) - allows controlling which bench cases execute. Can also be specified through the ",(0,i.kt)("inlineCode",{parentName:"li"},"options")," object."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"initialize"),"=: ",(0,i.kt)("inlineCode",{parentName:"li"},"() => any")," initialization function called once before ",(0,i.kt)("inlineCode",{parentName:"li"},"testFunc")," iterations start."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"multiplier"),"=",(0,i.kt)("inlineCode",{parentName:"li"},"1")," : ",(0,i.kt)("inlineCode",{parentName:"li"},"Number")," Multiplier applied to the number of actual iterations. Use this if each test case already performs a number of iterations. Affects reporting only."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"unit"),"=",(0,i.kt)("inlineCode",{parentName:"li"},"'iterations'"),": Can be used to customize the output message for bench results."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"_throughput"),"=",(0,i.kt)("inlineCode",{parentName:"li"},"false")," : ",(0,i.kt)("inlineCode",{parentName:"li"},"Number")," Use with ",(0,i.kt)("inlineCode",{parentName:"li"},"Bench.addAsync")," to specify that ",(0,i.kt)("inlineCode",{parentName:"li"},"_throughput")," iterations should be run in parallel. Note that automatic iteration selection is not available in this case.")),(0,i.kt)("p",null,"Returns: itself for chaining."),(0,i.kt)("h2",{id:"addasync"},"addAsync"),(0,i.kt)("p",null,"Adds an async test case. Use when ",(0,i.kt)("inlineCode",{parentName:"p"},"testFunc")," returns a promise. Supports same signatures as ",(0,i.kt)("inlineCode",{parentName:"p"},"add"),". "),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"bench.add(id: string, testCaseProps: TestCaseProps, testFunc: () => Promise<unknown>)"),"\n",(0,i.kt)("inlineCode",{parentName:"p"},"bench.add(id: string, testFunc: () => Promise<unknown>)")),(0,i.kt)("p",null,"When using ",(0,i.kt)("inlineCode",{parentName:"p"},"addAsync"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"testFunc")," is expected to return a promise."),(0,i.kt)("h3",{id:"run"},"run()"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"bench.run()")),(0,i.kt)("h3",{id:"calibrate"},"calibrate"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"bench.calibrate(id, func1, func2, opts)")))}d.isMDXComponent=!0}}]);